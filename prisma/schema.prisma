generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  password         String?
  emailVerified    DateTime?  @map("email_verified")
  image            String?
  posts            Post[]
  comments         Comment[]
  stripeCustomerId String?   @unique
  isActive         Boolean   @default(false)
  accounts         Account[]
  sessions         Session[]
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  content     String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  categories  PostCategory[] 
  tags        PostTag[]      
  comments    Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  posts       PostCategory[]    
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  posts       PostTag[]   
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PostCategory {
  postId      Int
  categoryId  Int
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  @@id([postId, categoryId])
}

model PostTag {
  postId  Int
  tagId   Int
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  @@id([postId, tagId])
}